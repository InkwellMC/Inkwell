From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: sub-kek <mia.krs3007@yandex.ru>
Date: Sun, 3 Dec 2023 23:39:23 +0300
Subject: [PATCH] Spark profiler


diff --git a/src/main/java/io/inkwellmc/inkwell/pluginproviders/SparkProviderSource.java b/src/main/java/io/inkwellmc/inkwell/pluginproviders/SparkProviderSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..757aaa3180fcbc6003dc1aab7b4d246681cc18ef
--- /dev/null
+++ b/src/main/java/io/inkwellmc/inkwell/pluginproviders/SparkProviderSource.java
@@ -0,0 +1,87 @@
+package io.inkwellmc.inkwell.pluginproviders;
+
+import com.mojang.logging.LogUtils;
+import io.papermc.paper.plugin.entrypoint.Entrypoint;
+import io.papermc.paper.plugin.entrypoint.EntrypointHandler;
+import io.papermc.paper.plugin.entrypoint.LaunchEntryPointHandler;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.InputStreamReader;
+import java.math.BigInteger;
+import java.net.URL;
+import java.net.URLConnection;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
+import java.security.MessageDigest;
+import java.util.stream.Collectors;
+import io.papermc.paper.plugin.provider.source.FileProviderSource;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.slf4j.Logger;
+
+public class SparkProviderSource extends FileProviderSource {
+    public static final SparkProviderSource INSTANCE = new SparkProviderSource();
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+    public SparkProviderSource() {
+        super("File '%s' specified by Inkwell"::formatted);
+    }
+    @Override
+    public void registerProviders(EntrypointHandler entrypointHandler, Path context) throws Exception {
+        // first, check if user doesn't want spark at all
+        if (Boolean.getBoolean("Inkwell.IReallyDontWantSpark")) {
+            return; // boo!
+        }
+        // second, check if user has their own spark
+        if (hasSpark()) {
+            LOGGER.info("Inkwell: Using user-provided spark plugin instead of our own.");
+            return; // let's hope it's at least the modern version :3
+        }
+        // you can't have errors in your code if you wrap the entire codebase in a try/catch block
+        try {
+            // make sure the directory exists where we want to keep spark
+            File file = context.toFile();
+            file.getParentFile().mkdirs();
+            boolean shouldDownload;
+            // check if our spark exists
+            if (!file.exists()) {
+                // it does not, so let's download it
+                shouldDownload = true;
+            } else {
+                // we have a spark file, let's see if it's up-to-date by comparing shas
+                String fileSha1 = String.format("%040x", new BigInteger(1, MessageDigest.getInstance("SHA-1").digest(Files.readAllBytes(file.toPath()))));
+                String sparkSha1;
+                // luck has a nifty endpoint containing the sha of the newest version
+                URLConnection urlConnection = new URL("https://sparkapi.lucko.me/download/bukkit/sha1").openConnection();
+                // set a reasonable timeout to prevent servers without internet from hanging for 60+ seconds on startup
+                urlConnection.setReadTimeout(5000);
+                urlConnection.setConnectTimeout(5000);
+                // read it
+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()))) {
+                    sparkSha1 = reader.lines().collect(Collectors.joining(""));
+                }
+                // compare; we only download a new spark if the shas don't match
+                shouldDownload = !fileSha1.equals(sparkSha1);
+            }
+            // ok, finally we can download spark if we need it
+            if (shouldDownload) {
+                URLConnection urlConnection = new URL("https://sparkapi.lucko.me/download/bukkit").openConnection();
+                urlConnection.setReadTimeout(5000);
+                urlConnection.setConnectTimeout(5000);
+                Files.copy(urlConnection.getInputStream(), file.toPath(), StandardCopyOption.REPLACE_EXISTING);
+            }
+            // register the spark, newly downloaded or existing
+            super.registerProviders(entrypointHandler, context);
+        } catch (Throwable e) {
+            LOGGER.error("Inkwell: Failed to download and install spark plugin", e);
+        }
+    }
+    private static boolean hasSpark() {
+        for (PluginProvider<JavaPlugin> provider : LaunchEntryPointHandler.INSTANCE.get(Entrypoint.PLUGIN).getRegisteredProviders()) {
+            if (provider.getMeta().getName().equalsIgnoreCase("spark")) {
+                return true;
+            }
+        }
+        return false;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 4588b2d7b97347cbf4202f110fbc5036ccd5b1e0..6c73892dc64a5dd82f91a4f8f4d0f0fd6a26e4b5 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -90,6 +90,7 @@ public class GlobalConfiguration extends ConfigurationPart {
 
     public class Timings extends ConfigurationPart.Post {
         public boolean enabled = true;
+        public boolean reallyEnabled = false;
         public boolean verbose = true;
         public String url = "https://timings.aikar.co/";
         public boolean serverNamePrivacy = false;
@@ -103,6 +104,14 @@ public class GlobalConfiguration extends ConfigurationPart {
 
         @Override
         public void postProcess() {
+            // Inkwell start
+            if (enabled && !reallyEnabled) {
+                org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.WARNING, "[Inkwell] To improve performance, timings have been disabled by default");
+                org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.WARNING, "[Inkwell] You can still use timings by using /timings on, but they will not start on server startup unless you set timings.really-enabled to true in paper.yml");
+                org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.WARNING, "[Inkwell] If you would like to disable this message, either set timings.really-enabled to true or timings.enabled to false.");
+            }
+            enabled = reallyEnabled;
+            // Inkwell end
             MinecraftTimings.processConfig(this);
         }
     }
diff --git a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
index 89bf48fd581ee6580b91e2eb31dd532cb622df5e..fc5e0eab448b9b914a8afaa738fe41d97dbc9ddb 100644
--- a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
+++ b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
@@ -102,6 +102,7 @@ public class PluginInitializerManager {
         java.util.List<File> files = (java.util.List<File>) optionSet.valuesOf("add-plugin");
         // Register plugins from the flag
         io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.PluginFlagProviderSource.INSTANCE, files);
+        io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.inkwellmc.inkwell.pluginproviders.SparkProviderSource.INSTANCE, new File("cache", "spark.jar").toPath()); // Inkwell
     }
 
     // This will be the end of me...
