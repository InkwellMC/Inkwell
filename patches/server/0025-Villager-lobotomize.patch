From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: sub-kek <subbkek@gmail.com>
Date: Wed, 17 Jan 2024 14:57:29 +0300
Subject: [PATCH] Villager lobotomize


diff --git a/src/main/java/io/inkwellmc/inkwell/InkwellConfig.java b/src/main/java/io/inkwellmc/inkwell/InkwellConfig.java
index 17c38dda77342d8313493521289b579a184900c1..d1be68a7735854a5e50b29689e1b3db7d618cf95 100644
--- a/src/main/java/io/inkwellmc/inkwell/InkwellConfig.java
+++ b/src/main/java/io/inkwellmc/inkwell/InkwellConfig.java
@@ -147,12 +147,23 @@ public class InkwellConfig {
     }
 
     public static boolean allowVoidTrading;
+    public static boolean villagerLobotomizeEnabled = false;
+    public static int villagerLobotomizeCheckInterval = 100;
     private static void villager() {
         allowVoidTrading = getBoolean(
                 "entity.villager.allow-void-trading",
                 false,
                 "Allows you to interact with merchants in unloaded chunks"
         );
+
+        villagerLobotomizeEnabled = getBoolean(
+                "entity.villager.lobotomize.enabled",
+                villagerLobotomizeEnabled
+        );
+        villagerLobotomizeCheckInterval = getInt(
+                "entity.villager.lobotomize.check-interval",
+                villagerLobotomizeCheckInterval
+        );
     }
 
     public static boolean usePigmanSpawnLimit;
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 2e169caf9af98dacc00ef56c4e699322e42fb8ba..01a6ca4f4a66c5ce465502121be13eb5d17c9c09 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -142,6 +142,9 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         return holder.is(PoiTypes.MEETING);
     });
 
+    private boolean isLobotomized = false; public boolean isLobotomized() { return this.isLobotomized; } // Inkwell
+    private int notLobotomizedCount = 0; // Inkwell
+
     public Villager(EntityType<? extends Villager> entityType, Level world) {
         this(entityType, world, VillagerType.PLAINS);
     }
@@ -206,6 +209,44 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         brain.updateActivityFromSchedule(this.level().getDayTime(), this.level().getGameTime());
     }
 
+    private boolean checkLobotomized() {
+        int interval = io.inkwellmc.inkwell.InkwellConfig.villagerLobotomizeCheckInterval;
+        if (this.notLobotomizedCount > 3) {
+            // check half as often if not lobotomized for the last 3+ consecutive checks
+            interval *= 2;
+        }
+        if (this.level().getGameTime() % interval == 0) {
+            // offset Y for short blocks like dirt_path/farmland
+            this.isLobotomized = !canTravelFrom(BlockPos.containing(this.position().x, this.getBoundingBox().minY + 0.0625D, this.position().z));
+            if (this.isLobotomized) {
+                this.notLobotomizedCount = 0;
+            } else {
+                this.notLobotomizedCount++;
+            }
+        }
+        return this.isLobotomized;
+    }
+    private boolean canTravelFrom(BlockPos pos) {
+        return canTravelTo(pos.east()) || canTravelTo(pos.west()) || canTravelTo(pos.north()) || canTravelTo(pos.south());
+    }
+    private boolean canTravelTo(BlockPos pos) {
+        net.minecraft.world.level.block.state.BlockState state = this.level().getBlockStateIfLoaded(pos);
+        if (state == null) {
+            // chunk not loaded
+            return false;
+        }
+        net.minecraft.world.level.block.Block bottom = state.getBlock();
+        if (bottom instanceof net.minecraft.world.level.block.FenceBlock ||
+                bottom instanceof net.minecraft.world.level.block.FenceGateBlock ||
+                bottom instanceof net.minecraft.world.level.block.WallBlock) {
+            // bottom block is too tall to get over
+            return false;
+        }
+        net.minecraft.world.level.block.Block top = level().getBlockState(pos.above()).getBlock();
+        // only if both blocks have no collision
+        return !bottom.hasCollision && !top.hasCollision;
+    }
+
     @Override
     protected void ageBoundaryReached() {
         super.ageBoundaryReached();
@@ -252,13 +293,20 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         this.customServerAiStep(false);
     }
     private int behaviorTick = 0; // Inkwell
-    protected void customServerAiStep(final boolean inactive) {
+    protected void customServerAiStep(boolean inactive) { // Inkwell - not final
         // Paper end
         this.level().getProfiler().push("villagerBrain");
         // Inkwell start
+        if (io.inkwellmc.inkwell.InkwellConfig.villagerLobotomizeEnabled) {
+            // treat as inactive if lobotomized
+            inactive = inactive || checkLobotomized();
+        } else {
+            this.isLobotomized = false;
+        }
+
         if (!inactive && this.behaviorTick++ % this.activatedPriority == 0) {
             this.getBrain().tick((ServerLevel) this.level(), this); // Paper
-        }
+        } else if (this.isLobotomized && shouldRestock()) restock();
         // Inkwell end
         this.level().getProfiler().pop();
         if (this.assignProfessionWhenSpawned) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index 6c15d40979fd3e3d246a447c432b321fbf29ada3..b6f7f4af28c677c5be8bb271a4ca8d6240ea6839 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -252,4 +252,11 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
         getHandle().getGossips().gossips.clear();
     }
     // Paper end
+
+    // Inkwell start
+    @Override
+    public boolean isLobotomized() {
+        return getHandle().isLobotomized();
+    }
+    // Inkwell end
 }
