From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: sub-kek <mia.krs3007@yandex.ru>
Date: Sun, 3 Dec 2023 17:12:21 +0300
Subject: [PATCH] Inkwell utils


diff --git a/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java b/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java
index 41b9405d6759d865e0d14dd4f95163e9690e967d..cab8204d58a0e24fdb21114599f2a1d04e8c0253 100644
--- a/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java
+++ b/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java
@@ -26,7 +26,7 @@ public abstract class AreaMap<E> {
 
     // we use linked for better iteration.
     // map of: coordinate to set of objects in coordinate
-    protected final Long2ObjectOpenHashMap<PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<E>> areaMap = new Long2ObjectOpenHashMap<>(1024, 0.7f);
+    protected Long2ObjectOpenHashMap<PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<E>> areaMap = new Long2ObjectOpenHashMap<>(1024, 0.7f); // Inkwell - not actually final
     protected final PooledLinkedHashSets<E> pooledHashSets;
 
     protected final ChangeCallback<E> addCallback;
@@ -160,7 +160,8 @@ public abstract class AreaMap<E> {
     protected abstract PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<E> getEmptySetFor(final E object);
 
     // expensive op, only for debug
-    protected void validate(final E object, final int viewDistance) {
+    protected void validate0(final E object, final int viewDistance) { // Inkwell - rename this thing just in case it gets used I'd rather a compile time error.
+        if (true) throw new UnsupportedOperationException(); // Inkwell - not going to put in the effort to fix this if it doesn't ever get used.
         int entiesGot = 0;
         int expectedEntries = (2 * viewDistance + 1);
         expectedEntries *= expectedEntries;
diff --git a/src/main/java/com/destroystokyo/paper/util/misc/PlayerAreaMap.java b/src/main/java/com/destroystokyo/paper/util/misc/PlayerAreaMap.java
index 46954db7ecd35ac4018fdf476df7c8020d7ce6c8..e7472d07d42ad30a19e6b69d6c8c0004ed8db693 100644
--- a/src/main/java/com/destroystokyo/paper/util/misc/PlayerAreaMap.java
+++ b/src/main/java/com/destroystokyo/paper/util/misc/PlayerAreaMap.java
@@ -5,7 +5,7 @@ import net.minecraft.server.level.ServerPlayer;
 /**
  * @author Spottedleaf
  */
-public final class PlayerAreaMap extends AreaMap<ServerPlayer> {
+public class PlayerAreaMap extends AreaMap<ServerPlayer> { // Inkwell - not actually final
 
     public PlayerAreaMap() {
         super();
diff --git a/src/main/java/io/inkwellmc/inkwell/InkwellLogger.java b/src/main/java/io/inkwellmc/inkwell/InkwellLogger.java
new file mode 100644
index 0000000000000000000000000000000000000000..157d77e796040806b7d7330a16df05189f522959
--- /dev/null
+++ b/src/main/java/io/inkwellmc/inkwell/InkwellLogger.java
@@ -0,0 +1,12 @@
+package io.inkwellmc.inkwell;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import org.bukkit.Bukkit;
+public class InkwellLogger extends Logger {
+    public static final InkwellLogger LOGGER = new InkwellLogger();
+    private InkwellLogger() {
+        super("Inkwell", null);
+        setParent(Bukkit.getLogger());
+        setLevel(Level.ALL);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/inkwellmc/inkwell/util/AsyncExecutor.java b/src/main/java/io/inkwellmc/inkwell/util/AsyncExecutor.java
new file mode 100644
index 0000000000000000000000000000000000000000..f071f752addf11b8fe5725d6b5c535247380ba0a
--- /dev/null
+++ b/src/main/java/io/inkwellmc/inkwell/util/AsyncExecutor.java
@@ -0,0 +1,73 @@
+package io.inkwellmc.inkwell.util;
+
+import com.google.common.collect.Queues;
+import io.inkwellmc.inkwell.InkwellLogger;
+
+import java.util.Queue;
+import java.util.concurrent.locks.Condition;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+import java.util.logging.Level;
+public class AsyncExecutor implements Runnable {
+
+    private final Queue<Runnable> jobs = Queues.newArrayDeque();
+    private final Lock mutex = new ReentrantLock();
+    private final Condition cond = mutex.newCondition();
+    private final Thread thread;
+    private volatile boolean killswitch = false;
+
+    public AsyncExecutor(String threadName) {
+        this.thread = new Thread(this, threadName);
+    }
+
+    public void start() {
+        thread.start();
+    }
+
+    public void kill() {
+        killswitch = true;
+        cond.signalAll();
+    }
+
+    public void submit(Runnable runnable) {
+        mutex.lock();
+        try {
+            jobs.offer(runnable);
+            cond.signalAll();
+        } finally {
+            mutex.unlock();
+        }
+    }
+
+    @Override
+    public void run() {
+        while (!killswitch) {
+            try {
+                Runnable runnable = takeRunnable();
+                if (runnable != null) {
+                    runnable.run();
+                }
+            } catch (InterruptedException e) {
+                Thread.currentThread().interrupt();
+            } catch (Exception e) {
+                InkwellLogger.LOGGER.log(Level.SEVERE, e, () -> "Failed to execute async job for thread " + thread.getName());
+            }
+        }
+    }
+
+    private Runnable takeRunnable() throws InterruptedException {
+        mutex.lock();
+        try {
+            while (jobs.isEmpty() && !killswitch) {
+                cond.await();
+            }
+
+            if (jobs.isEmpty()) return null; // We've set killswitch
+
+            return jobs.remove();
+        } finally {
+            mutex.unlock();
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/io/inkwellmc/inkwell/util/AsyncPlayerAreaMap.java b/src/main/java/io/inkwellmc/inkwell/util/AsyncPlayerAreaMap.java
new file mode 100644
index 0000000000000000000000000000000000000000..0967355e8402f8168ae5785dd4f349e9aabf1029
--- /dev/null
+++ b/src/main/java/io/inkwellmc/inkwell/util/AsyncPlayerAreaMap.java
@@ -0,0 +1,29 @@
+package io.inkwellmc.inkwell.util;
+
+import com.destroystokyo.paper.util.misc.PlayerAreaMap;
+import com.destroystokyo.paper.util.misc.PooledLinkedHashSets;
+import java.util.concurrent.ConcurrentHashMap;
+import net.minecraft.server.level.ServerPlayer;
+public final class AsyncPlayerAreaMap extends PlayerAreaMap {
+
+    public AsyncPlayerAreaMap() {
+        super();
+        this.areaMap = new Long2ObjectOpenHashMapWrapper<>(new ConcurrentHashMap<>(1024, 0.7f));
+    }
+
+    public AsyncPlayerAreaMap(final PooledLinkedHashSets<ServerPlayer> pooledHashSets) {
+        super(pooledHashSets);
+        this.areaMap = new Long2ObjectOpenHashMapWrapper<>(new ConcurrentHashMap<>(1024, 0.7f));
+    }
+
+    public AsyncPlayerAreaMap(final PooledLinkedHashSets<ServerPlayer> pooledHashSets, final ChangeCallback<ServerPlayer> addCallback,
+                              final ChangeCallback<ServerPlayer> removeCallback) {
+        this(pooledHashSets, addCallback, removeCallback, null);
+    }
+
+    public AsyncPlayerAreaMap(final PooledLinkedHashSets<ServerPlayer> pooledHashSets, final ChangeCallback<ServerPlayer> addCallback,
+                              final ChangeCallback<ServerPlayer> removeCallback, final ChangeSourceCallback<ServerPlayer> changeSourceCallback) {
+        super(pooledHashSets, addCallback, removeCallback, changeSourceCallback);
+        this.areaMap = new Long2ObjectOpenHashMapWrapper<>(new ConcurrentHashMap<>(1024, 0.7f));
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/inkwellmc/inkwell/util/IterableWrapper.java b/src/main/java/io/inkwellmc/inkwell/util/IterableWrapper.java
new file mode 100644
index 0000000000000000000000000000000000000000..114380b7d450cfcde76218cfb0b555487ca56ec9
--- /dev/null
+++ b/src/main/java/io/inkwellmc/inkwell/util/IterableWrapper.java
@@ -0,0 +1,15 @@
+package io.inkwellmc.inkwell.util;
+
+import java.util.Iterator;
+import org.jetbrains.annotations.NotNull;
+public class IterableWrapper<T> implements Iterable<T> {
+    private final Iterator<T> iterator;
+    public IterableWrapper(Iterator<T> iterator) {
+        this.iterator = iterator;
+    }
+    @NotNull
+    @Override
+    public Iterator<T> iterator() {
+        return iterator;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/inkwellmc/inkwell/util/Long2ObjectOpenHashMapWrapper.java b/src/main/java/io/inkwellmc/inkwell/util/Long2ObjectOpenHashMapWrapper.java
new file mode 100644
index 0000000000000000000000000000000000000000..70521dec57090be72abf8e1486656ff6c7566509
--- /dev/null
+++ b/src/main/java/io/inkwellmc/inkwell/util/Long2ObjectOpenHashMapWrapper.java
@@ -0,0 +1,39 @@
+package io.inkwellmc.inkwell.util;
+
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import java.util.Map;
+import org.jetbrains.annotations.Nullable;
+public class Long2ObjectOpenHashMapWrapper<V> extends Long2ObjectOpenHashMap<V> {
+
+    private final Map<Long, V> backingMap;
+
+    public Long2ObjectOpenHashMapWrapper(Map<Long, V> map) {
+        backingMap = map;
+    }
+
+    @Override
+    public V put(Long key, V value) {
+        return backingMap.put(key, value);
+    }
+
+    @Override
+    public V get(Object key) {
+        return backingMap.get(key);
+    }
+
+    @Override
+    public V remove(Object key) {
+        return backingMap.remove(key);
+    }
+
+    @Nullable
+    @Override
+    public V putIfAbsent(Long key, V value) {
+        return backingMap.putIfAbsent(key, value);
+    }
+
+    @Override
+    public int size() {
+        return backingMap.size();
+    }
+}
\ No newline at end of file
