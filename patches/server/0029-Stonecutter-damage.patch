From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: sub-kek <subbkek@gmail.com>
Date: Sun, 21 Jan 2024 15:02:28 +0300
Subject: [PATCH] Stonecutter damage


diff --git a/src/main/java/io/inkwellmc/inkwell/InkwellConfig.java b/src/main/java/io/inkwellmc/inkwell/InkwellConfig.java
index 04c5c42104045dc84b940e053e42fcd6df442347..8e4512d33b7226f3f387a4273e5033ec9aafbea4 100644
--- a/src/main/java/io/inkwellmc/inkwell/InkwellConfig.java
+++ b/src/main/java/io/inkwellmc/inkwell/InkwellConfig.java
@@ -297,4 +297,14 @@ public class InkwellConfig {
         infinityWorksWithSpectralArrows = getBoolean("gameplay-mechanics.infinity-bow.spectral-arrows", false);
         infinityWorksWithTippedArrows = getBoolean("gameplay-mechanics.infinity-bow.tipped-arrows", false);
     }
+
+    public static String deathMsgStonecutter;
+    private static void deathMessages() {
+        deathMsgStonecutter = getString("settings.messages.death-message.stonecutter", "<player> has sawed themself in half");
+    }
+
+    public static float stonecutterDamage;
+    private static void stonecutterSettings() {
+        stonecutterDamage = (float) getDouble("blocks.stonecutter.damage", 0.0F);
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 0814e3cf9bd20d4647d66d2b9c55a3ad8b120716..bb8430cc44b4df5a22f6be303bad566bf64c317f 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1884,6 +1884,24 @@ public class ServerPlayer extends Player {
         this.lastSentExp = -1; // CraftBukkit - Added to reset
     }
 
+    // Inkwell start
+    public void sendActionBarMessage(@Nullable String message) {
+        if (message != null && !message.isEmpty()) {
+            sendActionBarMessage(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(message));
+        }
+    }
+    public void sendActionBarMessage(@Nullable net.kyori.adventure.text.Component message) {
+        if (message != null) {
+            sendActionBarMessage(io.papermc.paper.adventure.PaperAdventure.asVanilla(message));
+        }
+    }
+    public void sendActionBarMessage(@Nullable Component message) {
+        if (message != null) {
+            displayClientMessage(message, true);
+        }
+    }
+    // Inkwell end
+
     @Override
     public void displayClientMessage(Component message, boolean overlay) {
         this.sendSystemMessage(message, overlay);
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 31245c4cbdb36f22bc0cee2fd71c0c65d1a08b82..e22e675cb6210fa58fcec1588246de11eb06c472 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1064,6 +1064,19 @@ public abstract class PlayerList {
     }
     // CraftBukkit end
 
+    // Inkwell start
+    public void broadcastMiniMessage(@Nullable String message, boolean overlay) {
+        if (message != null && !message.isEmpty()) {
+            this.broadcastMessage(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(message), overlay);
+        }
+    }
+    public void broadcastMessage(@Nullable net.kyori.adventure.text.Component message, boolean overlay) {
+        if (message != null) {
+            this.broadcastSystemMessage(io.papermc.paper.adventure.PaperAdventure.asVanilla(message), overlay);
+        }
+    }
+    // Inkwell end
+
     public void broadcastAll(Packet<?> packet, ResourceKey<Level> dimension) {
         Iterator iterator = this.players.iterator();
 
diff --git a/src/main/java/net/minecraft/world/damagesource/CombatTracker.java b/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
index 9c99b2e365aacb8309f29acb9025faccd2c676b3..a1709913a55ac131536f0fb5b30852b603b27899 100644
--- a/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
+++ b/src/main/java/net/minecraft/world/damagesource/CombatTracker.java
@@ -99,6 +99,9 @@ public class CombatTracker {
                 Component component = ComponentUtils.wrapInSquareBrackets(Component.translatable(string + ".link")).withStyle(INTENTIONAL_GAME_DESIGN_STYLE);
                 return Component.translatable(string + ".message", this.mob.getDisplayName(), component);
             } else {
+                if (damageSource.isStoneCutter) {
+                    return damageSource.getLocalizedDeathMessage(io.inkwellmc.inkwell.InkwellConfig.deathMsgStonecutter, this.mob);
+                }
                 return damageSource.getLocalizedDeathMessage(this.mob);
             }
         }
diff --git a/src/main/java/net/minecraft/world/damagesource/DamageSource.java b/src/main/java/net/minecraft/world/damagesource/DamageSource.java
index fc6903b20a6e084729306fc960a6fc80e094f76c..6d0ea93fe760e1dae42418da0422d8fc3494fbb1 100644
--- a/src/main/java/net/minecraft/world/damagesource/DamageSource.java
+++ b/src/main/java/net/minecraft/world/damagesource/DamageSource.java
@@ -54,6 +54,8 @@ public class DamageSource {
     // CraftBukkit end
     public @Nullable org.bukkit.block.BlockState explodedBlockState; // Paper - add exploded state
 
+    public boolean isStoneCutter; // Inkwell
+
     public String toString() {
         return "DamageSource (" + this.type().msgId() + ")";
     }
@@ -126,6 +128,15 @@ public class DamageSource {
         }
     }
 
+    // Inkwell start
+    public Component getLocalizedDeathMessage(String str, LivingEntity entity) {
+        net.kyori.adventure.text.Component name = io.papermc.paper.adventure.PaperAdventure.asAdventure(entity.getDisplayName());
+        net.kyori.adventure.text.minimessage.tag.resolver.TagResolver template = net.kyori.adventure.text.minimessage.tag.resolver.Placeholder.component("player", name);
+        net.kyori.adventure.text.Component component = net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(str, template);
+        return io.papermc.paper.adventure.PaperAdventure.asVanilla(component);
+    }
+    // Inkwell end
+
     public String getMsgId() {
         return this.type().msgId();
     }
diff --git a/src/main/java/net/minecraft/world/damagesource/DamageSources.java b/src/main/java/net/minecraft/world/damagesource/DamageSources.java
index f339475185645f7be30963e4f980ce81a6f7e536..a19403edacb7d9bb38fbe4b7d93c3e80c48924ce 100644
--- a/src/main/java/net/minecraft/world/damagesource/DamageSources.java
+++ b/src/main/java/net/minecraft/world/damagesource/DamageSources.java
@@ -267,4 +267,12 @@ public class DamageSources {
     public DamageSource genericKill() {
         return this.genericKill;
     }
+
+    // Inkwell start
+    public DamageSource stonecutter() {
+        DamageSource source = new DamageSource(this.damageTypes.getHolderOrThrow(DamageTypes.MAGIC));
+        source.isStoneCutter = true;
+        return source;
+    }
+    // Inkwell end
 }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 49004f362ce9381884665d68179b7e294d234ecb..d647029ebf2fe5afe0063a57e5c30c330e0577db 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4140,6 +4140,19 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
         return SlotAccess.NULL;
     }
 
+    // Inkwell Start
+    public void sendMiniMessage(@Nullable String message) {
+        if (message != null && !message.isEmpty()) {
+            this.sendMessage(net.kyori.adventure.text.minimessage.MiniMessage.miniMessage().deserialize(message));
+        }
+    }
+    public void sendMessage(@Nullable net.kyori.adventure.text.Component message) {
+        if (message != null) {
+            this.sendSystemMessage(io.papermc.paper.adventure.PaperAdventure.asVanilla(message));
+        }
+    }
+    // Inkwell end
+
     @Override
     public void sendSystemMessage(Component message) {}
 
diff --git a/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java b/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
index 77ae7b8ab24935d046cce1f8f7f476310876f9df..65e0382bc97b494812aba8c453ce12a646cae5a4 100644
--- a/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
@@ -99,4 +99,16 @@ public class StonecutterBlock extends Block {
     public boolean isPathfindable(BlockState state, BlockGetter world, BlockPos pos, PathComputationType type) {
         return false;
     }
+
+    // Inkwell start
+    @Override
+    public void stepOn(Level level, BlockPos pos, BlockState state, net.minecraft.world.entity.Entity entity) {
+        if (io.inkwellmc.inkwell.InkwellConfig.stonecutterDamage > 0.0F && entity instanceof net.minecraft.world.entity.LivingEntity) {
+            org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = level.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+            entity.hurt(entity.damageSources().stonecutter(), io.inkwellmc.inkwell.InkwellConfig.stonecutterDamage);
+            org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = null;
+        }
+        super.stepOn(level, pos, state, entity);
+    }
+    // Inkwell end
 }
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
index 2aca9b193db5dadc4fb90b8d7548277b698924aa..1d9c2177128fde7d92e19185849ba43db4974468 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
@@ -471,7 +471,7 @@ public class WalkNodeEvaluator extends NodeEvaluator {
                             return BlockPathTypes.BLOCKED;
                         } else {
                         // Paper end
-                        if (blockState.is(Blocks.CACTUS) || blockState.is(Blocks.SWEET_BERRY_BUSH)) {
+                        if (blockState.is(Blocks.CACTUS) || blockState.is(Blocks.SWEET_BERRY_BUSH) || blockState.is(Blocks.STONECUTTER)) { // Inkwell
                             return BlockPathTypes.DANGER_OTHER;
                         }
 
@@ -504,7 +504,7 @@ public class WalkNodeEvaluator extends NodeEvaluator {
         } else if (!blockState.is(BlockTags.TRAPDOORS) && !blockState.is(Blocks.LILY_PAD) && !blockState.is(Blocks.BIG_DRIPLEAF)) {
             if (blockState.is(Blocks.POWDER_SNOW)) {
                 return BlockPathTypes.POWDER_SNOW;
-            } else if (!blockState.is(Blocks.CACTUS) && !blockState.is(Blocks.SWEET_BERRY_BUSH)) {
+            } else if (!blockState.is(Blocks.CACTUS) && !blockState.is(Blocks.SWEET_BERRY_BUSH) && !blockState.is(Blocks.STONECUTTER)) { // Inkwell
                 if (blockState.is(Blocks.HONEY_BLOCK)) {
                     return BlockPathTypes.STICKY_HONEY;
                 } else if (blockState.is(Blocks.COCOA)) {
